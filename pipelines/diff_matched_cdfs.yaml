description: Catalog matching and analysis for HSC with COSMOS
parameters:
  bands_match_decals: ["g", "r", "i", "z"]
  bands_match_des_y3gold: ["g", "r", "i", "z"]
  bands_match_acs: ["i"]
  cdfs_decals_coord_ra: "ra"
  cdfs_decals_coord_dec: "dec"
  cdfs_des_y3gold_coord_ra: "ra_gaia"
  cdfs_des_y3gold_coord_dec: "dec_gaia"
  cdfs_acs_coord_ra: "ra_gaia"
  cdfs_acs_coord_dec: "dec_gaia"
tasks:
  matchObjectToCdfsDecals:
    class: lsst.pipe.tasks.match_tract_catalog.MatchTractCatalogTask
    config:
      connections.name_input_cat_ref: decals_dr10
      match_tract_catalog.coord_format.column_ref_coord1: parameters.cdfs_decals_coord_ra
      match_tract_catalog.coord_format.column_ref_coord2: parameters.cdfs_decals_coord_dec

      python: |
        # Target settings are likely common to all object tables
        from lsst.pipe.tasks.match_tract_catalog_probabilistic import MatchTractCatalogProbabilisticTask
        
        config.match_tract_catalog.retarget(MatchTractCatalogProbabilisticTask)
        fluxes_ref = [f"flux_{band}" for band in parameters.bands_match_decals]
        config.match_tract_catalog.columns_ref_flux = fluxes_ref
        config.match_tract_catalog.columns_ref_meas = [
          parameters.cdfs_decals_coord_ra, parameters.cdfs_decals_coord_dec,
        ] + fluxes_ref
        fluxes_meas = [f"{band}_cModelFlux" for band in parameters.bands_match_decals]
        columns_meas = ["coord_ra", "coord_dec"] + fluxes_meas
        config.match_tract_catalog.columns_target_meas = columns_meas
        config.match_tract_catalog.columns_target_err = [f"{col}Err" for col in columns_meas]
        # Might need adjusting for different survey depths
        config.match_tract_catalog.mag_faintest_ref = 27.0
        config.match_tract_catalog.columns_ref_copy = ["objid"]
        config.match_tract_catalog.columns_target_copy = ["objectId"]
  compareObjectToCdfsDecals:
    class: lsst.pipe.tasks.diff_matched_tract_catalog.DiffMatchedTractCatalogTask
    config:
      columns_target_coord_err: ["coord_raErr", "coord_decErr"]
      connections.name_input_cat_ref: decals_dr10
      coord_format.column_ref_coord1: parameters.cdfs_decals_coord_ra
      coord_format.column_ref_coord2: parameters.cdfs_decals_coord_dec
      include_unmatched: true

      python: |
        from lsst.pipe.tasks.diff_matched_tract_catalog import MatchedCatalogFluxesConfig
        columns_flux = {}
        fluxes_meas_psf = []
        for band in parameters.bands_match_decals:
            columns_flux[band] = MatchedCatalogFluxesConfig(
                column_ref_flux=f"flux_{band}",
                columns_target_flux=[f"{band}_cModelFlux",],
                columns_target_flux_err=[f"{band}_cModelFluxErr",],
            )
            fluxes_meas_psf.append(f"{band}_psfFlux")
        config.columns_flux = columns_flux
        config.columns_ref_copy = ["objid", "maskbits", "type"]
        config.columns_target_copy = ["patch", "refExtendedness"] + fluxes_meas_psf + [
          f"{col}Err" for col in fluxes_meas_psf
        ]
  matchObjectToCdfsDesY3Gold:
    class: lsst.pipe.tasks.match_tract_catalog.MatchTractCatalogTask
    config:
      connections.name_input_cat_ref: des_y3gold
      match_tract_catalog.coord_format.column_ref_coord1: parameters.cdfs_des_y3gold_coord_ra
      match_tract_catalog.coord_format.column_ref_coord2: parameters.cdfs_des_y3gold_coord_dec

      python: |
        # Target settings are likely common to all object tables
        from lsst.pipe.tasks.match_tract_catalog_probabilistic import MatchTractCatalogProbabilisticTask
        
        config.match_tract_catalog.retarget(MatchTractCatalogProbabilisticTask)
        fluxes_ref = [f"sof_cm_flux_{band}" for band in parameters.bands_match_des_y3gold]
        config.match_tract_catalog.columns_ref_flux = fluxes_ref
        config.match_tract_catalog.columns_ref_meas = [
          parameters.cdfs_des_y3gold_coord_ra, parameters.cdfs_des_y3gold_coord_dec,
        ] + fluxes_ref
        fluxes_meas = [f"{band}_cModelFlux" for band in parameters.bands_match_des_y3gold]
        columns_meas = ["coord_ra", "coord_dec"] + fluxes_meas
        config.match_tract_catalog.columns_target_meas = columns_meas
        config.match_tract_catalog.columns_target_err = [f"{col}Err" for col in columns_meas]
        # Might need adjusting for different survey depths
        config.match_tract_catalog.mag_faintest_ref = 27.0
        config.match_tract_catalog.columns_ref_copy = ["coadd_object_id"]
        config.match_tract_catalog.columns_target_copy = ["objectId"]
  compareObjectToCdfsDesY3Gold:
    class: lsst.pipe.tasks.diff_matched_tract_catalog.DiffMatchedTractCatalogTask
    config:
      columns_target_coord_err: ["coord_raErr", "coord_decErr"]
      connections.name_input_cat_ref: des_y3gold
      coord_format.column_ref_coord1: parameters.cdfs_des_y3gold_coord_ra
      coord_format.column_ref_coord2: parameters.cdfs_des_y3gold_coord_dec
      include_unmatched: true

      python: |
        from lsst.pipe.tasks.diff_matched_tract_catalog import MatchedCatalogFluxesConfig
        columns_flux = {}
        fluxes_meas_psf = []
        for band in parameters.bands_match_des_y3gold:
            columns_flux[band] = MatchedCatalogFluxesConfig(
                column_ref_flux=f"sof_cm_flux_{band}",
                columns_target_flux=[f"{band}_cModelFlux",],
                columns_target_flux_err=[f"{band}_cModelFluxErr",],
            )
            fluxes_meas_psf.append(f"{band}_psfFlux")
        config.columns_flux = columns_flux
        config.columns_ref_copy = ["coadd_object_id", "extended_class_mash_sof"]
        config.columns_target_copy = ["patch", "refExtendedness"] + fluxes_meas_psf + [
          f"{col}Err" for col in fluxes_meas_psf
        ]
  matchObjectToCdfsAcs:
    class: lsst.pipe.tasks.match_tract_catalog.MatchTractCatalogTask
    config:
      connections.name_input_cat_ref: cdfs_hlf_v2p1
      match_tract_catalog.coord_format.column_ref_coord1: parameters.cdfs_acs_coord_ra
      match_tract_catalog.coord_format.column_ref_coord2: parameters.cdfs_acs_coord_dec
      refcat_sharding_type: "none"
      python: |
        # Target settings are likely common to all object tables
        from lsst.pipe.tasks.match_tract_catalog_probabilistic import MatchTractCatalogProbabilisticTask
        
        config.match_tract_catalog.retarget(MatchTractCatalogProbabilisticTask)
        
        fluxes_ref = ["f_f775w"]
        config.match_tract_catalog.columns_ref_flux = fluxes_ref
        config.match_tract_catalog.columns_ref_meas = [
          parameters.cdfs_acs_coord_ra, parameters.cdfs_acs_coord_dec,
        ] + fluxes_ref
        fluxes_meas = [f"{band}_cModelFlux" for band in parameters.bands_match_acs]
        columns_meas = ["coord_ra", "coord_dec"] + fluxes_meas
        config.match_tract_catalog.columns_target_meas = columns_meas
        config.match_tract_catalog.columns_target_err = [f"{col}Err" for col in columns_meas]
        # Might need adjusting for different survey depths
        config.match_tract_catalog.mag_faintest_ref = 27.5
        config.match_tract_catalog.columns_ref_copy = ["id"]
        config.match_tract_catalog.columns_target_copy = ["objectId"]
  compareObjectToCdfsAcs:
    class: lsst.pipe.tasks.diff_matched_tract_catalog.DiffMatchedTractCatalogTask
    config:
      columns_target_coord_err: ["coord_raErr", "coord_decErr"]
      connections.name_input_cat_ref: cdfs_hlf_v2p1
      coord_format.column_ref_coord1: parameters.cdfs_acs_coord_ra
      coord_format.column_ref_coord2: parameters.cdfs_acs_coord_dec
      include_unmatched: true
      refcat_sharding_type: "none"

      python: |
        from lsst.pipe.tasks.diff_matched_tract_catalog import MatchedCatalogFluxesConfig
        columns_flux = {}
        fluxes_meas_psf = []
        for band in parameters.bands_match_acs:
            columns_flux[band] = MatchedCatalogFluxesConfig(
                column_ref_flux=f"f_f775w",
                columns_target_flux=[f"{band}_cModelFlux",],
                columns_target_flux_err=[f"{band}_cModelFluxErr",],
            )
            fluxes_meas_psf.append(f"{band}_psfFlux")
        config.columns_flux = columns_flux
        config.columns_target_copy = ["patch", "refExtendedness"] + fluxes_meas_psf + [
          f"{col}Err" for col in fluxes_meas_psf
        ]
        config.columns_ref_copy = ["id", "class_star"]