description: Catalog matching and analysis for HSC with COSMOS
parameters:
  bands_euclid: ["vis", "y", "j", "h"]
  bands_match_des_y6gold: ["g", "r", "i", "z", "y"]
  bands_match_acs: ["i"]
  bands_match_euclid: ["g", "r", "i", "z", "y"]
  des_y6gold_coord_ra: "alphawin_j2000"
  des_y6gold_coord_dec: "deltawin_j2000"
  cdfs_acs_coord_ra: "ra_gaia"
  cdfs_acs_coord_dec: "dec_gaia"
  columns_hlf_copy: [
    "id", "class_star",
    "ra", "dec", "ra_gaia", "dec_gaia",
    "f_f225w", "e_f225w", "f_f275w", "e_f275w",
    "f_f336w", "e_f336w", "f_f435w", "e_f435w",
    "f_f606w", "e_f606w", "f_f775w", "e_f775w",
    "f_f814w", "e_f814w", "f_f850lp", "e_f850lp",
    "f_f098m", "e_f098m", "f_f105w", "e_f105w",
    "f_f125w", "e_f125w", "f_f140w", "e_f140w",
    "f_f160w", "e_f160w",
    "z_spec", "star_flag", "flags", "detection_flag",
  ]
  columns_des_y6gold_copy: ["coadd_object_id", "ext_mash", "patch"]
  columns_euclid_copy: [
    "object_id", "right_ascension", "declination", "vis_det",
    "flux_vis_psf", "flux_y_templfit", "flux_j_templfit", "flux_h_templfit",
    "flux_vis_sersic", "flux_y_sersic", "flux_j_sersic", "flux_h_sersic",
    "fluxerr_vis_psf", "fluxerr_y_templfit", "fluxerr_j_templfit", "fluxerr_h_templfit",
    "fluxerr_vis_sersic", "fluxerr_y_sersic", "fluxerr_j_sersic", "fluxerr_h_sersic",
    "point_like_prob", "point_like_flag", "mumax_minus_mag", "spurious_flag", "spurious_prob",
    "ellipticity", "ellipticity_err", "semimajor_axis", "semimajor_axis_err",
    "position_angle", "position_angle_err", "kron_radius", "kron_radius_err",
    "gal_ebv", "gal_ebv_err", "phz_classification", "patch",
    "det_quality_flag",
  ]
  columns_obj_copy: ["objectId", "patch", "refExtendedness"]
  columns_sersic_copy: [
    "sersic_x", "sersic_y", "sersic_xErr", "sersic_yErr",
    "sersic_ra", "sersic_dec", "sersic_raErr", "sersic_decErr",
    "sersic_index", "sersic_indexErr", "sersic_rho", "sersic_rhoErr",
    "sersic_reff_x", "sersic_reff_xErr", "sersic_reff_y", "sersic_reff_yErr",
  ]
  euclid_coord_ra: "right_ascension"
  euclid_coord_dec: "declination"
  models_other: ["psf", "gaap1p0", "gaap3p0", "kron", "sersic"]
  prefix_acs: "hst_"
  prefix_des_y6gold: "des_"
  prefix_euclid: "euclid_"
tasks:
  matchObjectToCdfsDesY6Gold:
    class: lsst.pipe.tasks.match_tract_catalog.MatchTractCatalogTask
    config:
      connections.name_input_cat_ref: des_y6gold
      connections.name_input_cat_target: object
      match_tract_catalog.coord_format.column_ref_coord1: parameters.des_y6gold_coord_ra
      match_tract_catalog.coord_format.column_ref_coord2: parameters.des_y6gold_coord_dec

      python: |
        # Target settings are likely common to all object tables
        from lsst.pipe.tasks.match_tract_catalog_probabilistic import MatchTractCatalogProbabilisticTask
        
        config.match_tract_catalog.retarget(MatchTractCatalogProbabilisticTask)
        fluxes_ref = [f"bdf_flux_{band}_corrected" for band in parameters.bands_match_des_y6gold]
        config.match_tract_catalog.columns_ref_flux = fluxes_ref
        config.match_tract_catalog.columns_ref_meas = [
          parameters.des_y6gold_coord_ra, parameters.des_y6gold_coord_dec,
        ] + fluxes_ref
        fluxes_meas = [f"{band}_cModelFlux" for band in parameters.bands_match_des_y6gold]
        columns_meas = ["coord_ra", "coord_dec"] + fluxes_meas
        config.match_tract_catalog.columns_target_meas = columns_meas
        config.match_tract_catalog.columns_target_err = [f"{col}Err" for col in columns_meas]
        # Might need adjusting for different survey depths
        config.match_tract_catalog.mag_faintest_ref = 27.0
        config.match_tract_catalog.columns_ref_copy = ["coadd_object_id"]
        config.match_tract_catalog.columns_target_copy = ["objectId"]
  compareObjectToCdfsDesY6Gold:
    class: lsst.pipe.tasks.diff_matched_tract_catalog.DiffMatchedTractCatalogTask
    config:
      columns_target_coord_err: ["coord_raErr", "coord_decErr"]
      connections.name_input_cat_ref: des_y6gold
      connections.name_input_cat_target: object
      coord_format.column_ref_coord1: parameters.des_y6gold_coord_ra
      coord_format.column_ref_coord2: parameters.des_y6gold_coord_dec
      include_unmatched: true

      python: |
        from lsst.pipe.tasks.diff_matched_tract_catalog import MatchedCatalogFluxesConfig
        columns_flux = {}
        fluxes_meas_other = []
        for band in parameters.bands_match_des_y6gold:
            columns_flux[band] = MatchedCatalogFluxesConfig(
                column_ref_flux=f"bdf_flux_{band}_corrected",
                columns_target_flux=[f"{band}_cModelFlux",],
                columns_target_flux_err=[f"{band}_cModelFluxErr",],
            )
            for model in parameters.models_other:
              fluxes_meas_other.append(f"{band}_{model}Flux")
        config.columns_flux = columns_flux
        config.columns_ref_copy = parameters.columns_des_y6gold_copy
        config.columns_target_copy = parameters.columns_obj_copy + fluxes_meas_other + [
          f"{col}Err" for col in fluxes_meas_other
        ] + (parameters.columns_sersic_copy if "sersic" in parameters.models_other else [])
  matchObjectToCdfsAcs:
    class: lsst.pipe.tasks.match_tract_catalog.MatchTractCatalogTask
    config:
      connections.name_input_cat_ref: cdfs_hlf_v2p1
      connections.name_input_cat_target: object
      match_tract_catalog.coord_format.column_ref_coord1: parameters.cdfs_acs_coord_ra
      match_tract_catalog.coord_format.column_ref_coord2: parameters.cdfs_acs_coord_dec
      refcat_sharding_type: "none"
      python: |
        # Target settings are likely common to all object tables
        from lsst.pipe.tasks.match_tract_catalog_probabilistic import MatchTractCatalogProbabilisticTask
        
        config.match_tract_catalog.retarget(MatchTractCatalogProbabilisticTask)
        
        fluxes_ref = ["f_f775w"]
        config.match_tract_catalog.columns_ref_flux = fluxes_ref
        config.match_tract_catalog.columns_ref_meas = [
          parameters.cdfs_acs_coord_ra, parameters.cdfs_acs_coord_dec,
        ] + fluxes_ref
        config.match_tract_catalog.match_dist_max = 1.0
        fluxes_meas = [f"{band}_cModelFlux" for band in parameters.bands_match_acs]
        columns_meas = ["coord_ra", "coord_dec"] + fluxes_meas
        config.match_tract_catalog.columns_target_meas = columns_meas
        config.match_tract_catalog.columns_target_err = [f"{col}Err" for col in columns_meas]
        # Might need adjusting for different survey depths
        config.match_tract_catalog.mag_faintest_ref = 29.0
        config.match_tract_catalog.columns_ref_copy = ["id"]
        config.match_tract_catalog.columns_target_copy = ["objectId"]
  compareObjectToCdfsAcs:
    class: lsst.pipe.tasks.diff_matched_tract_catalog.DiffMatchedTractCatalogTask
    config:
      columns_target_coord_err: ["coord_raErr", "coord_decErr"]
      connections.name_input_cat_ref: cdfs_hlf_v2p1
      connections.name_input_cat_target: object
      coord_format.column_ref_coord1: parameters.cdfs_acs_coord_ra
      coord_format.column_ref_coord2: parameters.cdfs_acs_coord_dec
      refcat_sharding_type: "none"
      include_unmatched: true

      python: |
        from lsst.pipe.tasks.diff_matched_tract_catalog import MatchedCatalogFluxesConfig
        columns_flux = {}
        fluxes_meas_other = []
        for band in parameters.bands_match_acs:
            columns_flux[band] = MatchedCatalogFluxesConfig(
                column_ref_flux=f"f_f775w",
                columns_target_flux=[f"{band}_cModelFlux",],
                columns_target_flux_err=[f"{band}_cModelFluxErr",],
            )
            for model in parameters.models_other:
              fluxes_meas_other.append(f"{band}_{model}Flux")
        config.columns_flux = columns_flux
        config.columns_target_copy = parameters.columns_obj_copy + fluxes_meas_other + [
          f"{col}Err" for col in fluxes_meas_other
        ] + (parameters.columns_sersic_copy if "sersic" in parameters.models_other else [])
        config.columns_ref_copy = parameters.columns_hlf_copy
  matchObjectToCdfsEuclid:
    class: lsst.pipe.tasks.match_tract_catalog.MatchTractCatalogTask
    config:
      connections.name_input_cat_ref: euclid_q1
      connections.name_input_cat_target: object
      match_tract_catalog.coord_format.column_ref_coord1: parameters.euclid_coord_ra
      match_tract_catalog.coord_format.column_ref_coord2: parameters.euclid_coord_dec
      python: |
        # Target settings are likely common to all object tables
        from lsst.pipe.tasks.match_tract_catalog_probabilistic import MatchTractCatalogProbabilisticTask
        
        config.match_tract_catalog.retarget(MatchTractCatalogProbabilisticTask)
        
        fluxes_ref = ["flux_vis_sersic"]
        config.match_tract_catalog.columns_ref_flux = fluxes_ref
        config.match_tract_catalog.columns_ref_meas = [
          parameters.euclid_coord_ra, parameters.euclid_coord_dec,
        ] + fluxes_ref
        fluxes_meas = [f"{band}_cModelFlux" for band in parameters.bands_match_acs]
        columns_meas = ["coord_ra", "coord_dec"] + fluxes_meas
        config.match_tract_catalog.columns_target_meas = columns_meas
        config.match_tract_catalog.columns_target_err = [f"{col}Err" for col in columns_meas]
        # Might need adjusting for different survey depths
        config.match_tract_catalog.mag_faintest_ref = 29
        config.match_tract_catalog.columns_ref_copy = ["object_id"]
        config.match_tract_catalog.columns_target_copy = ["objectId"]
  compareObjectToCdfsEuclid:
    class: lsst.pipe.tasks.diff_matched_tract_catalog.DiffMatchedTractCatalogTask
    config:
      columns_target_coord_err: ["coord_raErr", "coord_decErr"]
      connections.name_input_cat_ref: euclid_q1
      connections.name_input_cat_target: object
      coord_format.column_ref_coord1: parameters.euclid_coord_ra
      coord_format.column_ref_coord2: parameters.euclid_coord_dec
      include_unmatched: true

      python: |
        from lsst.pipe.tasks.diff_matched_tract_catalog import MatchedCatalogFluxesConfig
        columns_flux = {}
        fluxes_meas_other = []
        for band in parameters.bands_match_euclid:
            columns_flux[band] = MatchedCatalogFluxesConfig(
                column_ref_flux=f"flux_vis_sersic",
                columns_target_flux=[f"{band}_cModelFlux",],
                columns_target_flux_err=[f"{band}_cModelFluxErr",],
            )
            for model in parameters.models_other:
              fluxes_meas_other.append(f"{band}_{model}Flux")
        config.columns_flux = columns_flux
        config.columns_ref_copy = parameters.columns_euclid_copy
        config.columns_target_copy = parameters.columns_obj_copy + fluxes_meas_other + [
          f"{col}Err" for col in fluxes_meas_other
        ] + (parameters.columns_sersic_copy if "sersic" in parameters.models_other else [])
  matchCdfsDesY6GoldToCdfsAcs:
    class: lsst.pipe.tasks.match_tract_catalog.MatchTractCatalogTask
    config:
      connections.name_input_cat_ref: cdfs_hlf_v2p1
      connections.name_input_cat_target: des_y6gold
      match_tract_catalog.columns_target_select_false: []
      match_tract_catalog.columns_target_select_true: []
      match_tract_catalog.coord_format.column_ref_coord1: parameters.cdfs_acs_coord_ra
      match_tract_catalog.coord_format.column_ref_coord2: parameters.cdfs_acs_coord_dec
      match_tract_catalog.coord_format.column_target_coord1: parameters.des_y6gold_coord_ra
      match_tract_catalog.coord_format.column_target_coord2: parameters.des_y6gold_coord_dec
      refcat_sharding_type: "none"

      python: |
        # Target settings are likely common to all object tables
        from lsst.pipe.tasks.match_tract_catalog_probabilistic import MatchTractCatalogProbabilisticTask
        
        config.match_tract_catalog.retarget(MatchTractCatalogProbabilisticTask)
        fluxes_ref = ["f_f775w"]
        config.match_tract_catalog.columns_ref_flux = fluxes_ref
        config.match_tract_catalog.columns_ref_meas = [
          parameters.cdfs_acs_coord_ra, parameters.cdfs_acs_coord_dec,
        ] + fluxes_ref

        fluxes_meas = [f"bdf_flux_i_corrected"]
        config.match_tract_catalog.columns_target_meas = [
          parameters.des_y6gold_coord_ra, parameters.des_y6gold_coord_dec,
        ] + fluxes_meas

        config.match_tract_catalog.columns_target_err = [
          "ra_err", "dec_err", f"bdf_flux_err_i_corrected",
        ]
        # Might need adjusting for different survey depths
        config.match_tract_catalog.mag_faintest_ref = 29.0
        config.match_tract_catalog.columns_ref_copy = parameters.columns_hlf_copy
        config.match_tract_catalog.columns_target_copy = ["coadd_object_id"]
  compareCdfsDesY6GoldToCdfsAcs:
    class: lsst.pipe.tasks.diff_matched_tract_catalog.DiffMatchedTractCatalogTask
    config:
      connections.name_input_cat_ref: cdfs_hlf_v2p1
      connections.name_input_cat_target: des_y6gold
      columns_target_select_false: []
      columns_target_select_true: []
      columns_target_coord_err: ["ra_err", "dec_err"]
      coord_format.column_ref_coord1: parameters.cdfs_acs_coord_ra
      coord_format.column_ref_coord2: parameters.cdfs_acs_coord_dec
      coord_format.column_target_coord1: parameters.des_y6gold_coord_ra
      coord_format.column_target_coord2: parameters.des_y6gold_coord_dec
      include_unmatched: true
      prefix_best_coord: "coord_best_"
      refcat_sharding_type: "none"
      column_matched_prefix_ref: parameters.prefix_acs
      column_matched_prefix_target: parameters.prefix_des_y6gold

      python: |
        from lsst.pipe.tasks.diff_matched_tract_catalog import MatchedCatalogFluxesConfig
        fluxes_meas_other = [f"bdf_flux_{band}_corrected" for band in parameters.bands_match_des_y6gold]
        config.columns_ref_copy = parameters.columns_hlf_copy
        config.columns_target_copy = [
          parameters.des_y6gold_coord_ra, parameters.des_y6gold_coord_dec,
        ] + parameters.columns_des_y6gold_copy + fluxes_meas_other + [
          f"bdf_flux_err_{band}_corrected" for band in parameters.bands_match_des_y6gold
        ]
  matchObjectToCdfsAcsDes:
    class: lsst.pipe.tasks.match_tract_catalog.MatchTractCatalogTask
    config:
      connections.name_input_cat_ref: matched_cdfs_hlf_v2p1_des_y6gold
      connections.name_input_cat_target: object_all
      match_tract_catalog.coord_format.column_ref_coord1: coord_best_ra
      match_tract_catalog.coord_format.column_ref_coord2: coord_best_dec

      python: |
        # Target settings are likely common to all object tables
        from lsst.pipe.tasks.match_tract_catalog_probabilistic import MatchTractCatalogProbabilisticTask
        
        config.match_tract_catalog.retarget(MatchTractCatalogProbabilisticTask)
        
        fluxes_ref = ["hst_f_f775w", "des_bdf_flux_i_corrected"]
        config.match_tract_catalog.columns_ref_flux = fluxes_ref
        config.match_tract_catalog.columns_ref_meas = [
          f"hst_{parameters.cdfs_acs_coord_ra}", f"hst_{parameters.cdfs_acs_coord_dec}",
          f"des_{parameters.des_y6gold_coord_ra}", f"des_{parameters.des_y6gold_coord_dec}",
        ] + fluxes_ref
        fluxes_meas = ["i_sersicFlux", "i_sersicFlux"]
        columns_meas = ["sersic_ra", "sersic_dec", "sersic_ra", "sersic_dec"] + fluxes_meas
        config.match_tract_catalog.columns_target_meas = columns_meas
        config.match_tract_catalog.columns_target_err = [f"{col}Err" for col in columns_meas]
        # Might need adjusting for different survey depths
        config.match_tract_catalog.mag_faintest_ref = 29.0
        config.match_tract_catalog.columns_ref_copy = ["hst_id", "des_coadd_object_id"]
        config.match_tract_catalog.columns_target_copy = ["objectId"]
  compareObjectToCdfsAcsDes:
    class: lsst.pipe.tasks.diff_matched_tract_catalog.DiffMatchedTractCatalogTask
    config:
      columns_target_coord_err: ["sersic_raErr", "sersic_decErr"]
      connections.name_input_cat_ref: matched_cdfs_hlf_v2p1_des_y6gold
      connections.name_input_cat_target: object_all
      coord_format.column_ref_coord1: coord_best_ra
      coord_format.column_ref_coord2: coord_best_dec
      include_unmatched: true
      prefix_best_coord: "coord_best_"
      column_matched_prefix_ref: ""

      python: |
        from lsst.pipe.tasks.diff_matched_tract_catalog import MatchedCatalogFluxesConfig
        columns_flux = {}
        fluxes_meas_other = []
        for band in parameters.bands_match_acs:
            columns_flux[band] = MatchedCatalogFluxesConfig(
                column_ref_flux=f"{parameters.prefix_acs}f_f775w",
                columns_target_flux=[f"{band}_cModelFlux",],
                columns_target_flux_err=[f"{band}_cModelFluxErr",],
            )
            for model in parameters.models_other:
              fluxes_meas_other.append(f"{band}_{model}Flux")
        config.columns_flux = columns_flux
        config.columns_target_copy = parameters.columns_obj_copy + fluxes_meas_other + [
          f"{col}Err" for col in fluxes_meas_other
        ] + (parameters.columns_sersic_copy if "sersic" in parameters.models_other else [])
        prefix_matched = "matched_"
        config.column_matched_prefix_ref = prefix_matched 
        config.columns_ref_copy = [
          f"{parameters.prefix_acs}{col_ref}" for col_ref in parameters.columns_hlf_copy
        ] + [
          f"{parameters.prefix_des_y6gold}{col_ref}" for col_ref in [
            parameters.des_y6gold_coord_ra, parameters.des_y6gold_coord_dec,
          ] + parameters.columns_des_y6gold_copy + [
            f"bdf_flux_err_{band}_corrected" for band in parameters.bands_match_des_y6gold
          ]
        ]
  matchCdfsEuclidToCdfsAcs:
    class: lsst.pipe.tasks.match_tract_catalog.MatchTractCatalogTask
    config:
      connections.name_input_cat_ref: cdfs_hlf_v2p1
      connections.name_input_cat_target: euclid_q1
      match_tract_catalog.columns_target_select_false: []
      match_tract_catalog.columns_target_select_true: []
      match_tract_catalog.coord_format.column_ref_coord1: parameters.cdfs_acs_coord_ra
      match_tract_catalog.coord_format.column_ref_coord2: parameters.cdfs_acs_coord_dec
      match_tract_catalog.coord_format.column_target_coord1: parameters.euclid_coord_ra
      match_tract_catalog.coord_format.column_target_coord2: parameters.euclid_coord_dec
      refcat_sharding_type: "none"

      python: |
        # Target settings are likely common to all object tables
        from lsst.pipe.tasks.match_tract_catalog_probabilistic import MatchTractCatalogProbabilisticTask
        
        config.match_tract_catalog.retarget(MatchTractCatalogProbabilisticTask)
        fluxes_ref = ["f_f775w"]
        config.match_tract_catalog.columns_ref_flux = fluxes_ref
        config.match_tract_catalog.columns_ref_meas = [
          parameters.cdfs_acs_coord_ra, parameters.cdfs_acs_coord_dec,
        ] + fluxes_ref
        config.match_tract_catalog.match_dist_max = 1.0

        fluxes_meas = ["flux_vis_sersic"]
        config.match_tract_catalog.columns_target_meas = [
          parameters.euclid_coord_ra, parameters.euclid_coord_dec,
        ] + fluxes_meas

        config.match_tract_catalog.columns_target_err = [
          "right_ascension_est_error", "declination_est_error", f"fluxerr_vis_sersic",
        ]
        # Might need adjusting for different survey depths
        config.match_tract_catalog.mag_faintest_ref = 29.0
        config.match_tract_catalog.columns_ref_copy = parameters.columns_hlf_copy
        config.match_tract_catalog.columns_target_copy = ["object_id"]
  compareCdfsEuclidToCdfsAcs:
    class: lsst.pipe.tasks.diff_matched_tract_catalog.DiffMatchedTractCatalogTask
    config:
      connections.name_input_cat_ref: cdfs_hlf_v2p1
      connections.name_input_cat_target: euclid_q1
      columns_target_select_false: []
      columns_target_select_true: []
      columns_target_coord_err: ["right_ascension_est_error", "declination_est_error"]
      coord_format.column_ref_coord1: parameters.cdfs_acs_coord_ra
      coord_format.column_ref_coord2: parameters.cdfs_acs_coord_dec
      coord_format.column_target_coord1: parameters.euclid_coord_ra
      coord_format.column_target_coord2: parameters.euclid_coord_dec
      include_unmatched: true
      prefix_best_coord: "coord_best_"
      refcat_sharding_type: "none"
      column_matched_prefix_ref: parameters.prefix_acs
      column_matched_prefix_target: parameters.prefix_euclid

      python: |
        from lsst.pipe.tasks.diff_matched_tract_catalog import MatchedCatalogFluxesConfig
        config.columns_ref_copy = parameters.columns_hlf_copy
        config.columns_target_copy = parameters.columns_euclid_copy
  matchObjectToCdfsAcsEuclid:
    class: lsst.pipe.tasks.match_tract_catalog.MatchTractCatalogTask
    config:
      connections.name_input_cat_ref: matched_cdfs_hlf_v2p1_euclid_q1
      connections.name_input_cat_target: object
      match_tract_catalog.coord_format.column_ref_coord1: coord_best_ra
      match_tract_catalog.coord_format.column_ref_coord2: coord_best_dec
      match_tract_catalog.columns_target_select_false: []
      match_tract_catalog.columns_target_select_true: []

      python: |
        # Target settings are likely common to all object tables
        from lsst.pipe.tasks.match_tract_catalog_probabilistic import MatchTractCatalogProbabilisticTask
        
        config.match_tract_catalog.retarget(MatchTractCatalogProbabilisticTask)
        
        prefix_hst = parameters.prefix_acs
        prefix_euclid = parameters.prefix_euclid
        
        fluxes_ref = [f"{prefix_hst}f_f775w", f"{prefix_euclid}flux_vis_sersic"]
        config.match_tract_catalog.columns_ref_flux = fluxes_ref
        config.match_tract_catalog.columns_ref_meas = [
          f"{prefix_hst}{parameters.cdfs_acs_coord_ra}", f"{prefix_hst}{parameters.cdfs_acs_coord_dec}",
          f"{prefix_euclid}{parameters.euclid_coord_ra}", f"{prefix_euclid}{parameters.euclid_coord_dec}",
        ] + fluxes_ref
        fluxes_meas = ["i_sersicFlux", "i_sersicFlux"]
        columns_meas = ["sersic_ra", "sersic_dec", "sersic_ra", "sersic_dec"] + fluxes_meas
        config.match_tract_catalog.columns_target_meas = columns_meas
        config.match_tract_catalog.columns_target_err = [f"{col}Err" for col in columns_meas]
        # Might need adjusting for different survey depths
        config.match_tract_catalog.mag_faintest_ref = 29.0
        config.match_tract_catalog.columns_ref_copy = [f"{prefix_hst}id", f"{prefix_euclid}object_id"]
        config.match_tract_catalog.columns_target_copy = ["objectId"]
  compareObjectToCdfsAcsEuclid:
    class: lsst.pipe.tasks.diff_matched_tract_catalog.DiffMatchedTractCatalogTask
    config:
      column_match_candidate_ref: None
      columns_target_coord_err: ["sersic_raErr", "sersic_decErr"]
      connections.name_input_cat_ref: matched_cdfs_hlf_v2p1_euclid_q1
      connections.name_input_cat_target: object
      coord_format.column_ref_coord1: coord_best_ra
      coord_format.column_ref_coord2: coord_best_dec
      include_unmatched: true
      prefix_best_coord: "coord_best_"
      column_matched_prefix_ref: ""

      python: |
        from lsst.pipe.tasks.diff_matched_tract_catalog import MatchedCatalogFluxesConfig

        prefix_hst = parameters.prefix_acs
        prefix_euclid = parameters.prefix_euclid

        columns_flux = {}
        fluxes_meas_other = []      
        
        for band in parameters.bands_match_acs:
            columns_flux[band] = MatchedCatalogFluxesConfig(
                column_ref_flux=f"{prefix_hst}f_f775w",
                columns_target_flux=[f"{band}_cModelFlux",],
                columns_target_flux_err=[f"{band}_cModelFluxErr",],
            )
            for model in parameters.models_other:
              fluxes_meas_other.append(f"{band}_{model}Flux")
        for band in ("u", "g", "r", "i", "z", "y"):
          if band not in parameters.bands_match_acs:
            fluxes_meas_other.append(f"{band}_cModelFlux")
            for model in parameters.models_other:
              fluxes_meas_other.append(f"{band}_{model}Flux")          
        config.columns_flux = columns_flux
        config.columns_target_copy = parameters.columns_obj_copy + fluxes_meas_other + [
          f"{col}Err" for col in fluxes_meas_other
        ] + (parameters.columns_sersic_copy if "sersic" in parameters.models_other else [])
        config.columns_ref_copy = [
          f"{prefix_hst}{col_ref}" for col_ref in parameters.columns_hlf_copy
        ] + [
          f"{prefix_euclid}{col_ref}" for col_ref in parameters.columns_euclid_copy
        ]
